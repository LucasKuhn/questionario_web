c
aplicacao
5.to_f / 7
6.0 / 7
5.0 / 7
7 / 7
5 / 7
    corretas
    respostas.each { |resposta| corretas += 1 if resposta.alternativa.correta }
    corretas = 0
respostas = aplicacao.respostas
respostas
resposta.alternativa.correta
resposta.alternativa.correta?
resposta.alternativa.correta
resposta.alternativa
resposta = aplicacao.respostas.last
resposta = _
aplicacao.respostas.last
aplicacao.respostas
aplicacao.questoes
aplicacao.questoes_faltantes.empty?
aplicacao.questoes_faltantes
if aplicacao.questoes_faltantes
c
((result %1)*60).to_i
( result % 1 ) * 60.to_i
( result % 1 ) * 60
result.to_i
result
result / 1
( result % 1 ) * 60
result % 1
result % 60
result
limit - Time.now
(limit - Time.now).class
limit - Time.now
Time.now
limit
result
c
teste.questoes - respondidas
respondidas
    respostas.each { |resposta| respondidas << resposta.questao }
respondidas = []
respostas.each { |resposta| questao = resposta.questao respondidas << questao }
respostas.each { |resposta| questao = resposta.questao ; respondidas << questao }
respostas.each {|resposta| questao = resposta.questao ; respondidas << questao}
respondidas = []
    end
      respondidas << resposta.questao 
    respostas.each do |resposta|
    respostas.each { |resposta| respondidas << resposta.questao }
    respondidas = []
respostas.first.questao
respostas.first
respostas
respostas.each { |resposta| respondidas << resposta.questao }
    respondidas = []
respostas.each { |resposta| respondidas << resposta.questao }
teste.questoes
respostas.first.questao_dataset.select(:id).all
dset = respostas.first.questao_dataset.select(:id)
dset = respostas.first.questao
(dset+dset).run
(dset+dset).all
(dset+dset).result
dset + dset
dset = dset
dset = respostas.first.questao_dataset
dataset = _
respostas.first.questao_dataset
respostas.first.questoes_dataset
respostas.first
respostas
respostas.
respostas.all
respostas_dataset.select(:alternativa_id)
respostas.select(:alternativa_id)
respostas
respostas_dataset
respostas
continue
respostas.alternativas
respostas
c
aplicacao.respostas
aplicacao.add_resposta(request.params)
resposta.new
aplicacao.respostas.create(request.params)
aplicacao.respostas
aplicacao = AplicacaoTeste.find(id:$1)
AplicacaoTeste.find(id:$1)
$1
request.params
response
c
aplicacao.teste.questoes.sample
aplicacao.teste.questoes.class
aplicacao.teste.questoes.count
aplicacao.teste.questoes
result > 0
result > 0 ? result : 0
result = ( limit - Time.now ) / 60
ramaining
ramaining > 0 ? ramaining : 0
remaining = ( limit - Time.now ) / 60
    ramaining > 0 ? ramaining : 0
    remaining = ( limit - Time.now ) / 60
    limit = aplicacao.hora_inicio + (aplicacao.teste.duracao * 60)
aplicacao.hora_inicio
hora_inicio
( limit - Time.now ) / 60
limit - Time.now
Limit - Time.now
Limit - time.now
Time.now - limit
Time.now
limit.class
limit - DateTime.now
DateTime.now - limit
limit = aplicacao.hora_inicio + (aplicacao.teste.duracao * 60)
DateTime.now - 
DateTime.now
aplicacao.hora_inicio + (aplicacao.teste.duracao * 60)
aplicacao.hora_inicio
aplicacao.hora_inicio.class
hora_inicio.class
5.minutes
aplicacao.hora_inicio
aplicacao.hora_inicio + aplicacao.teste.duracao
aplicacao.teste.duracao
aplicacao.teste
aplicacao.hora_inicio
aplicacao.time_remaining
aplicacao = AplicacaoTeste.last
AplicacaoTeste.teste
AplicacaoTeste.last
AplicacoesController.aplicacao = AplicacaoTeste.find(id:id)
AplicacaoTeste.find(id:id)
id
c
request.params['teste']
request.params
c
env
c
env
c
env
c
env
c
env
c
env
c
request.params
c
request.params
c
filename
File.open("./public/img/#{filename}", 'wb') { |new_file| new_file.write(file.to_s) }
File.open("./public/img/#{filename}", 'wb') { |new_file| new_file.write(file.to_s)) }
file
file.to_s
file.bytes
file.read
file.to_sequel_blob.read
file.to_sequel_blob
file.read
file = questao.ilustracao
questao.ilustracao
filename = questao.nome_ilustracao
questao.nome_ilulstracao
questao
c
questao.ilustracao
id
questao
c
questao
questao.save
questao = Questao.new(texto:'com arquivo', ilustracao:read_file)
request.params
read_file
read_file = file.read
file
questao
questao.save
questao.valid?
questao
questao = Questao.new(request.params)
request.params
exit
File.open("./public/#{filename}", 'wb') { |new_file| new_file.write(file.read) }
File.open("./public/#{filename}", 'wb')
        end
          f.write(file.read)
        File.open("./public/#{filename}", 'wb') do |f|
        file = request.params["ilustracao"][:tempfile]
        filename = request.params["ilustracao"][:filename]
request.params["ilustracao"][:filename]
request.params["ilustracao"][:tempfile]
request.params["ilustracao"]
request.params
exit
request
request.params["ilustracao"]
request.params["ilustracao"].read
request.params["ilustracao"]
request.params
c
request.get?
request
c
elaborador = Elaborador.new(request.params)
c
Elaborador.create
Elaborador.new
elaborador = Elaborador.new(request.params)
request.params
c
kind
self.kind
self.class
self
c
Pessoa.all
Candidato.all
Elaborador.create(usuario:'lucas',senha:'123123')
Elaborador.all
Pessoa.all
Candidato.last.delete
Candidato.delete
Candidato.delete_all
Candidato.all
Elaborador.all
Candidato.find(id:2)
Elaborador.find(id:2)
self
Elaborador.last
Elaborador
self.kind_of? Elaborador
self.is_a? Elaborador
self.instance_of? Elaborador
self.instance_of? Candidato
self.instance_of? String
self.class.ancestors
self.class.superclass
self.class.parents
self.class
self
self.class
